{"ast":null,"code":"import { Subject, Subscription, BehaviorSubject, combineLatest, timer, EMPTY, of } from 'rxjs';\nimport { filter, debounce, switchMap, tap, delay, finalize, takeUntil, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction NgProgressComponent_ng_container_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"box-shadow\", \"0 0 10px \" + ctx_r2.color + \", 0 0 5px \" + ctx_r2.color);\n  }\n}\n\nfunction NgProgressComponent_ng_container_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelement(1, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-top-color\", ctx_r3.color)(\"border-left-color\", ctx_r3.color);\n  }\n}\n\nfunction NgProgressComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n    i0.ɵɵtemplate(4, NgProgressComponent_ng_container_0_div_4_Template, 1, 2, \"div\", 4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(5, NgProgressComponent_ng_container_0_div_5_Template, 2, 4, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const state_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transition\", \"opacity \" + ctx_r0.speed + \"ms \" + ctx_r0.ease);\n    i0.ɵɵattribute(\"active\", state_r1.active);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"transform\", state_r1.transform)(\"background-color\", ctx_r0.color)(\"transition\", state_r1.active ? \"all \" + ctx_r0.speed + \"ms \" + ctx_r0.ease : \"none\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.meteor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.spinner);\n  }\n}\n\nclass NgProgressRef {\n  constructor(customConfig, _onDestroyCallback) {\n    this._onDestroyCallback = _onDestroyCallback; // Progress start source event (used to cancel finalizing delays)\n\n    this._started = new Subject(); // Progress start event: stream that emits only when it hasn't already started\n\n    this.started = this._started.pipe(filter(() => !this.isStarted)); // Progress ended source event\n\n    this._completed = new Subject(); // Progress start event: stream that emits only when it has already started\n\n    this.completed = this._completed.pipe(filter(() => this.isStarted)); // Stream that increments and updates the progress state\n\n    this._trickling = new Subject(); // Stream that combines \"_trickling\" and \"config\" streams\n\n    this._worker = Subscription.EMPTY;\n    this._state = new BehaviorSubject({\n      active: false,\n      value: 0\n    });\n    this._config = new BehaviorSubject(customConfig);\n    this.state = this._state.asObservable();\n    this.config = this._config.asObservable();\n    this._worker = combineLatest([this._trickling, this._config]).pipe(debounce(([start, config]) => timer(start ? config.debounceTime : 0)), switchMap(([start, config]) => start ? this.onTrickling(config) : this.onComplete(config))).subscribe();\n  } // Get current progress state\n\n\n  get snapshot() {\n    return this._state.value;\n  } // Check if progress has started\n\n\n  get isStarted() {\n    return this.snapshot.active;\n  }\n  /**\r\n   * Start the progress\r\n   */\n\n\n  start() {\n    this._started.next();\n\n    this._trickling.next(true);\n  }\n  /**\r\n   * Complete the progress\r\n   */\n\n\n  complete() {\n    this._trickling.next(false);\n  }\n  /**\r\n   * Increment the progress\r\n   */\n\n\n  inc(amount) {\n    const n = this.snapshot.value;\n\n    if (!this.isStarted) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = this._config.value.trickleFunc(n);\n      }\n\n      this.set(n + amount);\n    }\n  }\n  /**\r\n   * Set the progress\r\n   */\n\n\n  set(n) {\n    this.setState({\n      value: this.clamp(n),\n      active: true\n    });\n  }\n  /**\r\n   * Set config\r\n   */\n\n\n  setConfig(config) {\n    this._config.next({ ...this._config.value,\n      ...config\n    });\n  }\n  /**\r\n   * Destroy progress reference\r\n   */\n\n\n  destroy() {\n    this._worker.unsubscribe();\n\n    this._trickling.complete();\n\n    this._state.complete();\n\n    this._config.complete();\n\n    this._started.complete();\n\n    this._completed.complete();\n\n    this._onDestroyCallback();\n  }\n  /**\r\n   * Set progress state\r\n   */\n\n\n  setState(state) {\n    this._state.next({ ...this.snapshot,\n      ...state\n    });\n  }\n  /**\r\n   * Clamps a value to be between min and max\r\n   */\n\n\n  clamp(n) {\n    return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\n  }\n  /**\r\n   * Keeps incrementing the progress\r\n   */\n\n\n  onTrickling(config) {\n    if (!this.isStarted) {\n      this.set(this._config.value.min);\n    }\n\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\n  }\n  /**\r\n   * Completes then resets the progress\r\n   */\n\n\n  onComplete(config) {\n    this._completed.next();\n\n    return !this.isStarted ? EMPTY : of({}).pipe( // Complete the progress\n    tap(() => this.setState({\n      value: 100\n    })), // Deactivate the progress after a tiny delay\n    delay(config.speed * 1.7), tap(() => this.setState({\n      active: false\n    })), // Use a tiny delay before resetting\n    delay(config.speed), // Force the progress to reset even it got cancelled\n    finalize(() => this.setState({\n      value: 0\n    })), // Cancel any of the finalizing delays if the progress has started again\n    takeUntil(this._started));\n  }\n\n}\n\nconst NG_PROGRESS_CONFIG = new InjectionToken('ngProgressConfig');\nconst defaultConfig = {\n  min: 8,\n  max: 100,\n  speed: 200,\n  debounceTime: 0,\n  trickleSpeed: 300,\n  fixed: true,\n  meteor: true,\n  thick: false,\n  spinner: true,\n  ease: 'linear',\n  color: '#1B95E0',\n  direction: 'ltr+',\n  spinnerPosition: 'right',\n  trickleFunc: n => {\n    if (n >= 0 && n < 20) return 10;\n    if (n >= 20 && n < 50) return 4;\n    if (n >= 50 && n < 80) return 2;\n    if (n >= 80 && n < 99) return 0.5;\n    return 0;\n  }\n};\n\nclass NgProgress {\n  constructor(config) {\n    // Store progress bar instances\n    this._instances = new Map();\n    this.config = config ? { ...defaultConfig,\n      ...config\n    } : defaultConfig;\n  }\n  /**\r\n   * Get or Create progress bar by ID\r\n   */\n\n\n  ref(id = 'root', config) {\n    if (this._instances.has(id)) {\n      // Get ProgressRef instance\n      const progressRef = this._instances.get(id);\n\n      if (config) {\n        progressRef.setConfig({ ...this.config,\n          ...config\n        });\n      }\n\n      return progressRef;\n    } else {\n      // Create new ProgressRef instance\n      const progressRef = new NgProgressRef({ ...this.config,\n        ...config\n      }, this.deleteInstance(id));\n      return this._instances.set(id, progressRef).get(id);\n    }\n  }\n  /**\r\n   * Destroy all progress bar instances\r\n   */\n\n\n  destroyAll() {\n    this._instances.forEach(ref => ref.destroy());\n  }\n  /**\r\n   * A destroyer function for each progress bar instance\r\n   */\n\n\n  deleteInstance(id) {\n    return () => {\n      this._instances.delete(id);\n    };\n  }\n\n}\n\nNgProgress.ɵfac = function NgProgress_Factory(t) {\n  return new (t || NgProgress)(i0.ɵɵinject(NG_PROGRESS_CONFIG, 8));\n};\n\nNgProgress.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgProgress,\n  factory: NgProgress.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgress, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nclass NgProgressComponent {\n  constructor(_ngProgress) {\n    this._ngProgress = _ngProgress;\n    /** Creates a new instance if id is not already exists */\n\n    this.id = 'root';\n    /** Initializes inputs from the global config */\n\n    this.min = this._ngProgress.config.min;\n    this.max = this._ngProgress.config.max;\n    this.ease = this._ngProgress.config.ease;\n    this.color = this._ngProgress.config.color;\n    this.speed = this._ngProgress.config.speed;\n    this.thick = this._ngProgress.config.thick;\n    this.fixed = this._ngProgress.config.fixed;\n    this.meteor = this._ngProgress.config.meteor;\n    this.spinner = this._ngProgress.config.spinner;\n    this.trickleSpeed = this._ngProgress.config.trickleSpeed;\n    this.debounceTime = this._ngProgress.config.debounceTime;\n    this.trickleFunc = this._ngProgress.config.trickleFunc;\n    this.spinnerPosition = this._ngProgress.config.spinnerPosition;\n    this.direction = this._ngProgress.config.direction;\n    this.started = new EventEmitter();\n    this.completed = new EventEmitter();\n  }\n\n  get isStarted() {\n    return this.progressRef?.isStarted;\n  }\n\n  ngOnChanges() {\n    // Update progress bar config when inputs change\n    this.progressRef?.setConfig({\n      max: this.max > 0 && this.max <= 100 ? this.max : 100,\n      min: this.min < 100 && this.min >= 0 ? this.min : 0,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      trickleFunc: this.trickleFunc,\n      debounceTime: this.debounceTime\n    });\n  }\n\n  ngOnInit() {\n    // Get progress bar service instance\n    this.progressRef = this._ngProgress.ref(this.id, {\n      max: this.max,\n      min: this.min,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      debounceTime: this.debounceTime\n    }); // Subscribe to progress state\n\n    this.state$ = this.progressRef.state.pipe(map(state => ({\n      active: state.active,\n      transform: `translate3d(${state.value}%,0,0)`\n    }))); // Subscribes to started and completed events on demand\n\n    if (this.started.observed) {\n      this._started = this.progressRef.started.subscribe(() => this.started.emit());\n    }\n\n    if (this.completed.observed) {\n      this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\n    }\n  }\n\n  ngOnDestroy() {\n    this._started?.unsubscribe();\n    this._completed?.unsubscribe();\n    this.progressRef?.destroy();\n  }\n\n  start() {\n    this.progressRef.start();\n  }\n\n  complete() {\n    this.progressRef.complete();\n  }\n\n  inc(n) {\n    this.progressRef.inc(n);\n  }\n\n  set(n) {\n    this.progressRef.set(n);\n  }\n\n}\n\nNgProgressComponent.ɵfac = function NgProgressComponent_Factory(t) {\n  return new (t || NgProgressComponent)(i0.ɵɵdirectiveInject(NgProgress));\n};\n\nNgProgressComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgProgressComponent,\n  selectors: [[\"ng-progress\"]],\n  hostAttrs: [\"role\", \"progressbar\"],\n  hostVars: 4,\n  hostBindings: function NgProgressComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"spinnerPosition\", ctx.spinnerPosition)(\"direction\", ctx.direction)(\"thick\", ctx.thick)(\"fixed\", ctx.fixed);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    min: \"min\",\n    max: \"max\",\n    ease: \"ease\",\n    color: \"color\",\n    speed: \"speed\",\n    thick: \"thick\",\n    fixed: \"fixed\",\n    meteor: \"meteor\",\n    spinner: \"spinner\",\n    trickleSpeed: \"trickleSpeed\",\n    debounceTime: \"debounceTime\",\n    trickleFunc: \"trickleFunc\",\n    spinnerPosition: \"spinnerPosition\",\n    direction: \"direction\"\n  },\n  outputs: {\n    started: \"started\",\n    completed: \"completed\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [1, \"ng-progress-bar\"], [1, \"ng-bar-placeholder\"], [1, \"ng-bar\"], [\"class\", \"ng-meteor\", 3, \"boxShadow\", 4, \"ngIf\"], [\"class\", \"ng-spinner\", 4, \"ngIf\"], [1, \"ng-meteor\"], [1, \"ng-spinner\"], [1, \"ng-spinner-icon\"]],\n  template: function NgProgressComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgProgressComponent_ng_container_0_Template, 6, 11, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.state$));\n    }\n  },\n  dependencies: [i2.NgIf, i2.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{z-index:999999;pointer-events:none}[fixed=true][_nghost-%COMP%]   .ng-progress-bar[_ngcontent-%COMP%], [fixed=true][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{position:fixed}[fixed=true][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{top:15px}[fixed=true][spinnerPosition=left][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{left:15px}[fixed=true][spinnerPosition=right][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{right:15px}[thick=true][_nghost-%COMP%]   .ng-spinner-icon[_ngcontent-%COMP%]{width:24px;height:24px;border-width:3px}[thick=true][_nghost-%COMP%]   .ng-bar-placeholder[_ngcontent-%COMP%]{height:3px!important}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=ltr-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(3deg)}[direction=\\\"ltr+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=ltr-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(4deg)}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-bar[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-bar[_ngcontent-%COMP%]{margin-left:-100%}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{right:0}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{top:-3px}[direction=\\\"ltr+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{top:-4px}[direction=ltr-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{bottom:-3px}[direction=ltr-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{bottom:-4px}[direction=ltr-][_nghost-%COMP%]   .ng-bar-placeholder[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-bar-placeholder[_ngcontent-%COMP%]{transform:rotate(180deg)}[direction=ltr-][_nghost-%COMP%]   .ng-spinner-icon[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-spinner-icon[_ngcontent-%COMP%]{animation-directionection:reverse}[direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(-3deg)}[direction=\\\"rtl+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(-4deg)}[spinnerPosition=left][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{left:10px}[spinnerPosition=right][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{right:10px}.ng-progress-bar[_ngcontent-%COMP%]{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true][_ngcontent-%COMP%]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder[_ngcontent-%COMP%]{position:absolute;height:2px;width:100%}.ng-bar[_ngcontent-%COMP%]{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor[_ngcontent-%COMP%]{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner[_ngcontent-%COMP%]{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon[_ngcontent-%COMP%]{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-progress',\n      host: {\n        'role': 'progressbar',\n        '[attr.spinnerPosition]': 'spinnerPosition',\n        '[attr.direction]': 'direction',\n        '[attr.thick]': 'thick',\n        '[attr.fixed]': 'fixed'\n      },\n      template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n           [attr.active]=\"state.active\"\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n               [style.transform]=\"state.transform\"\n               [style.backgroundColor]=\"color\"\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n               [style.borderTopColor]=\"color\"\n               [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\\\"ltr+\\\"] .ng-bar,:host[direction=\\\"rtl+\\\"] .ng-bar{margin-left:-100%}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{right:0}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\\\"rtl+\\\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\\\"rtl+\\\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\\\"rtl+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgProgress\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    ease: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    speed: [{\n      type: Input\n    }],\n    thick: [{\n      type: Input\n    }],\n    fixed: [{\n      type: Input\n    }],\n    meteor: [{\n      type: Input\n    }],\n    spinner: [{\n      type: Input\n    }],\n    trickleSpeed: [{\n      type: Input\n    }],\n    debounceTime: [{\n      type: Input\n    }],\n    trickleFunc: [{\n      type: Input\n    }],\n    spinnerPosition: [{\n      type: Input\n    }],\n    direction: [{\n      type: Input\n    }],\n    started: [{\n      type: Output\n    }],\n    completed: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgProgressModule {\n  static withConfig(config) {\n    return {\n      ngModule: NgProgressModule,\n      providers: [{\n        provide: NG_PROGRESS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgProgressModule.ɵfac = function NgProgressModule_Factory(t) {\n  return new (t || NgProgressModule)();\n};\n\nNgProgressModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgProgressModule\n});\nNgProgressModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgProgressComponent],\n      exports: [NgProgressComponent],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-progressbar\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NG_PROGRESS_CONFIG, NgProgress, NgProgressComponent, NgProgressModule, NgProgressRef };","map":{"version":3,"names":["Subject","Subscription","BehaviorSubject","combineLatest","timer","EMPTY","of","filter","debounce","switchMap","tap","delay","finalize","takeUntil","map","i0","InjectionToken","Injectable","Optional","Inject","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","NgModule","i2","CommonModule","NgProgressRef","constructor","customConfig","_onDestroyCallback","_started","started","pipe","isStarted","_completed","completed","_trickling","_worker","_state","active","value","_config","state","asObservable","config","start","debounceTime","onTrickling","onComplete","subscribe","snapshot","next","complete","inc","amount","n","trickleFunc","set","setState","clamp","setConfig","destroy","unsubscribe","Math","max","min","trickleSpeed","speed","NG_PROGRESS_CONFIG","defaultConfig","fixed","meteor","thick","spinner","ease","color","direction","spinnerPosition","NgProgress","_instances","Map","ref","id","has","progressRef","get","deleteInstance","destroyAll","forEach","delete","ɵfac","ɵprov","type","args","providedIn","undefined","decorators","NgProgressComponent","_ngProgress","ngOnChanges","ngOnInit","state$","transform","observed","emit","ngOnDestroy","ɵcmp","NgIf","AsyncPipe","selector","host","template","changeDetection","OnPush","styles","NgProgressModule","withConfig","ngModule","providers","provide","useValue","ɵmod","ɵinj","declarations","exports","imports"],"sources":["C:/repos/Covid-Cases/node_modules/ngx-progressbar/fesm2020/ngx-progressbar.mjs"],"sourcesContent":["import { Subject, Subscription, BehaviorSubject, combineLatest, timer, EMPTY, of } from 'rxjs';\nimport { filter, debounce, switchMap, tap, delay, finalize, takeUntil, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgProgressRef {\r\n    constructor(customConfig, _onDestroyCallback) {\r\n        this._onDestroyCallback = _onDestroyCallback;\r\n        // Progress start source event (used to cancel finalizing delays)\r\n        this._started = new Subject();\r\n        // Progress start event: stream that emits only when it hasn't already started\r\n        this.started = this._started.pipe(filter(() => !this.isStarted));\r\n        // Progress ended source event\r\n        this._completed = new Subject();\r\n        // Progress start event: stream that emits only when it has already started\r\n        this.completed = this._completed.pipe(filter(() => this.isStarted));\r\n        // Stream that increments and updates the progress state\r\n        this._trickling = new Subject();\r\n        // Stream that combines \"_trickling\" and \"config\" streams\r\n        this._worker = Subscription.EMPTY;\r\n        this._state = new BehaviorSubject({ active: false, value: 0 });\r\n        this._config = new BehaviorSubject(customConfig);\r\n        this.state = this._state.asObservable();\r\n        this.config = this._config.asObservable();\r\n        this._worker = combineLatest([this._trickling, this._config]).pipe(debounce(([start, config]) => timer(start ? config.debounceTime : 0)), switchMap(([start, config]) => start ? this.onTrickling(config) : this.onComplete(config))).subscribe();\r\n    }\r\n    // Get current progress state\r\n    get snapshot() {\r\n        return this._state.value;\r\n    }\r\n    // Check if progress has started\r\n    get isStarted() {\r\n        return this.snapshot.active;\r\n    }\r\n    /**\r\n     * Start the progress\r\n     */\r\n    start() {\r\n        this._started.next();\r\n        this._trickling.next(true);\r\n    }\r\n    /**\r\n     * Complete the progress\r\n     */\r\n    complete() {\r\n        this._trickling.next(false);\r\n    }\r\n    /**\r\n     * Increment the progress\r\n     */\r\n    inc(amount) {\r\n        const n = this.snapshot.value;\r\n        if (!this.isStarted) {\r\n            this.start();\r\n        }\r\n        else {\r\n            if (typeof amount !== 'number') {\r\n                amount = this._config.value.trickleFunc(n);\r\n            }\r\n            this.set(n + amount);\r\n        }\r\n    }\r\n    /**\r\n     * Set the progress\r\n     */\r\n    set(n) {\r\n        this.setState({ value: this.clamp(n), active: true });\r\n    }\r\n    /**\r\n     * Set config\r\n     */\r\n    setConfig(config) {\r\n        this._config.next({ ...this._config.value, ...config });\r\n    }\r\n    /**\r\n     * Destroy progress reference\r\n     */\r\n    destroy() {\r\n        this._worker.unsubscribe();\r\n        this._trickling.complete();\r\n        this._state.complete();\r\n        this._config.complete();\r\n        this._started.complete();\r\n        this._completed.complete();\r\n        this._onDestroyCallback();\r\n    }\r\n    /**\r\n     * Set progress state\r\n     */\r\n    setState(state) {\r\n        this._state.next({ ...this.snapshot, ...state });\r\n    }\r\n    /**\r\n     * Clamps a value to be between min and max\r\n     */\r\n    clamp(n) {\r\n        return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\r\n    }\r\n    /**\r\n     * Keeps incrementing the progress\r\n     */\r\n    onTrickling(config) {\r\n        if (!this.isStarted) {\r\n            this.set(this._config.value.min);\r\n        }\r\n        return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\r\n    }\r\n    /**\r\n     * Completes then resets the progress\r\n     */\r\n    onComplete(config) {\r\n        this._completed.next();\r\n        return !this.isStarted ? EMPTY : of({}).pipe(\r\n        // Complete the progress\r\n        tap(() => this.setState({ value: 100 })), \r\n        // Deactivate the progress after a tiny delay\r\n        delay(config.speed * 1.7), tap(() => this.setState({ active: false })), \r\n        // Use a tiny delay before resetting\r\n        delay(config.speed), \r\n        // Force the progress to reset even it got cancelled\r\n        finalize(() => this.setState({ value: 0 })), \r\n        // Cancel any of the finalizing delays if the progress has started again\r\n        takeUntil(this._started));\r\n    }\r\n}\n\nconst NG_PROGRESS_CONFIG = new InjectionToken('ngProgressConfig');\n\nconst defaultConfig = {\r\n    min: 8,\r\n    max: 100,\r\n    speed: 200,\r\n    debounceTime: 0,\r\n    trickleSpeed: 300,\r\n    fixed: true,\r\n    meteor: true,\r\n    thick: false,\r\n    spinner: true,\r\n    ease: 'linear',\r\n    color: '#1B95E0',\r\n    direction: 'ltr+',\r\n    spinnerPosition: 'right',\r\n    trickleFunc: (n) => {\r\n        if (n >= 0 && n < 20)\r\n            return 10;\r\n        if (n >= 20 && n < 50)\r\n            return 4;\r\n        if (n >= 50 && n < 80)\r\n            return 2;\r\n        if (n >= 80 && n < 99)\r\n            return 0.5;\r\n        return 0;\r\n    }\r\n};\r\nclass NgProgress {\r\n    constructor(config) {\r\n        // Store progress bar instances\r\n        this._instances = new Map();\r\n        this.config = config ? { ...defaultConfig, ...config } : defaultConfig;\r\n    }\r\n    /**\r\n     * Get or Create progress bar by ID\r\n     */\r\n    ref(id = 'root', config) {\r\n        if (this._instances.has(id)) {\r\n            // Get ProgressRef instance\r\n            const progressRef = this._instances.get(id);\r\n            if (config) {\r\n                progressRef.setConfig({ ...this.config, ...config });\r\n            }\r\n            return progressRef;\r\n        }\r\n        else {\r\n            // Create new ProgressRef instance\r\n            const progressRef = new NgProgressRef({ ...this.config, ...config }, this.deleteInstance(id));\r\n            return this._instances.set(id, progressRef).get(id);\r\n        }\r\n    }\r\n    /**\r\n     * Destroy all progress bar instances\r\n     */\r\n    destroyAll() {\r\n        this._instances.forEach((ref) => ref.destroy());\r\n    }\r\n    /**\r\n     * A destroyer function for each progress bar instance\r\n     */\r\n    deleteInstance(id) {\r\n        return () => {\r\n            this._instances.delete(id);\r\n        };\r\n    }\r\n}\r\nNgProgress.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgress, deps: [{ token: NG_PROGRESS_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgProgress.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgress, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgress, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NG_PROGRESS_CONFIG]\r\n                }] }]; } });\n\nclass NgProgressComponent {\r\n    constructor(_ngProgress) {\r\n        this._ngProgress = _ngProgress;\r\n        /** Creates a new instance if id is not already exists */\r\n        this.id = 'root';\r\n        /** Initializes inputs from the global config */\r\n        this.min = this._ngProgress.config.min;\r\n        this.max = this._ngProgress.config.max;\r\n        this.ease = this._ngProgress.config.ease;\r\n        this.color = this._ngProgress.config.color;\r\n        this.speed = this._ngProgress.config.speed;\r\n        this.thick = this._ngProgress.config.thick;\r\n        this.fixed = this._ngProgress.config.fixed;\r\n        this.meteor = this._ngProgress.config.meteor;\r\n        this.spinner = this._ngProgress.config.spinner;\r\n        this.trickleSpeed = this._ngProgress.config.trickleSpeed;\r\n        this.debounceTime = this._ngProgress.config.debounceTime;\r\n        this.trickleFunc = this._ngProgress.config.trickleFunc;\r\n        this.spinnerPosition = this._ngProgress.config.spinnerPosition;\r\n        this.direction = this._ngProgress.config.direction;\r\n        this.started = new EventEmitter();\r\n        this.completed = new EventEmitter();\r\n    }\r\n    get isStarted() {\r\n        return this.progressRef?.isStarted;\r\n    }\r\n    ngOnChanges() {\r\n        // Update progress bar config when inputs change\r\n        this.progressRef?.setConfig({\r\n            max: (this.max > 0 && this.max <= 100) ? this.max : 100,\r\n            min: (this.min < 100 && this.min >= 0) ? this.min : 0,\r\n            speed: this.speed,\r\n            trickleSpeed: this.trickleSpeed,\r\n            trickleFunc: this.trickleFunc,\r\n            debounceTime: this.debounceTime\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        // Get progress bar service instance\r\n        this.progressRef = this._ngProgress.ref(this.id, {\r\n            max: this.max,\r\n            min: this.min,\r\n            speed: this.speed,\r\n            trickleSpeed: this.trickleSpeed,\r\n            debounceTime: this.debounceTime\r\n        });\r\n        // Subscribe to progress state\r\n        this.state$ = this.progressRef.state.pipe(map((state) => ({\r\n            active: state.active,\r\n            transform: `translate3d(${state.value}%,0,0)`\r\n        })));\r\n        // Subscribes to started and completed events on demand\r\n        if (this.started.observed) {\r\n            this._started = this.progressRef.started.subscribe(() => this.started.emit());\r\n        }\r\n        if (this.completed.observed) {\r\n            this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._started?.unsubscribe();\r\n        this._completed?.unsubscribe();\r\n        this.progressRef?.destroy();\r\n    }\r\n    start() {\r\n        this.progressRef.start();\r\n    }\r\n    complete() {\r\n        this.progressRef.complete();\r\n    }\r\n    inc(n) {\r\n        this.progressRef.inc(n);\r\n    }\r\n    set(n) {\r\n        this.progressRef.set(n);\r\n    }\r\n}\r\nNgProgressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgressComponent, deps: [{ token: NgProgress }], target: i0.ɵɵFactoryTarget.Component });\r\nNgProgressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0\", type: NgProgressComponent, selector: \"ng-progress\", inputs: { id: \"id\", min: \"min\", max: \"max\", ease: \"ease\", color: \"color\", speed: \"speed\", thick: \"thick\", fixed: \"fixed\", meteor: \"meteor\", spinner: \"spinner\", trickleSpeed: \"trickleSpeed\", debounceTime: \"debounceTime\", trickleFunc: \"trickleFunc\", spinnerPosition: \"spinnerPosition\", direction: \"direction\" }, outputs: { started: \"started\", completed: \"completed\" }, host: { attributes: { \"role\": \"progressbar\" }, properties: { \"attr.spinnerPosition\": \"spinnerPosition\", \"attr.direction\": \"direction\", \"attr.thick\": \"thick\", \"attr.fixed\": \"fixed\" } }, usesOnChanges: true, ngImport: i0, template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\"\r\n           [attr.active]=\"state.active\"\r\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\r\n        <div class=\"ng-bar-placeholder\">\r\n          <div class=\"ng-bar\"\r\n               [style.transform]=\"state.transform\"\r\n               [style.backgroundColor]=\"color\"\r\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\r\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\r\n          <div class=\"ng-spinner-icon\"\r\n               [style.borderTopColor]=\"color\"\r\n               [style.borderLeftColor]=\"color\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `, isInline: true, styles: [\":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\\\"ltr+\\\"] .ng-bar,:host[direction=\\\"rtl+\\\"] .ng-bar{margin-left:-100%}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{right:0}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\\\"rtl+\\\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\\\"rtl+\\\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\\\"rtl+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: i2.AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgressComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ng-progress', host: {\r\n                        'role': 'progressbar',\r\n                        '[attr.spinnerPosition]': 'spinnerPosition',\r\n                        '[attr.direction]': 'direction',\r\n                        '[attr.thick]': 'thick',\r\n                        '[attr.fixed]': 'fixed'\r\n                    }, template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\"\r\n           [attr.active]=\"state.active\"\r\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\r\n        <div class=\"ng-bar-placeholder\">\r\n          <div class=\"ng-bar\"\r\n               [style.transform]=\"state.transform\"\r\n               [style.backgroundColor]=\"color\"\r\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\r\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\r\n          <div class=\"ng-spinner-icon\"\r\n               [style.borderTopColor]=\"color\"\r\n               [style.borderLeftColor]=\"color\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\\\"ltr+\\\"] .ng-bar,:host[direction=\\\"rtl+\\\"] .ng-bar{margin-left:-100%}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{right:0}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\\\"rtl+\\\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\\\"rtl+\\\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\\\"rtl+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgProgress }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], ease: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }], speed: [{\r\n                type: Input\r\n            }], thick: [{\r\n                type: Input\r\n            }], fixed: [{\r\n                type: Input\r\n            }], meteor: [{\r\n                type: Input\r\n            }], spinner: [{\r\n                type: Input\r\n            }], trickleSpeed: [{\r\n                type: Input\r\n            }], debounceTime: [{\r\n                type: Input\r\n            }], trickleFunc: [{\r\n                type: Input\r\n            }], spinnerPosition: [{\r\n                type: Input\r\n            }], direction: [{\r\n                type: Input\r\n            }], started: [{\r\n                type: Output\r\n            }], completed: [{\r\n                type: Output\r\n            }] } });\n\nclass NgProgressModule {\r\n    static withConfig(config) {\r\n        return {\r\n            ngModule: NgProgressModule,\r\n            providers: [\r\n                { provide: NG_PROGRESS_CONFIG, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgProgressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgProgressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgressModule, declarations: [NgProgressComponent], imports: [CommonModule], exports: [NgProgressComponent] });\r\nNgProgressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgressModule, imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgProgressModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [NgProgressComponent],\r\n                    exports: [NgProgressComponent],\r\n                    imports: [CommonModule]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-progressbar\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NG_PROGRESS_CONFIG, NgProgress, NgProgressComponent, NgProgressModule, NgProgressRef };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}